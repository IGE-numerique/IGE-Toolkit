/// Plot SAR median and SAR time series (written by L. Charrier)

var str2='2023-12-31'; //last date
var str1='2014-01-01'; //first date
var dir='ASCENDING';
var croppalette=1.2;
// ------------------------------------------------------------
// date selection
var date2 = ee.Date(str2);
var date1 = ee.Date(str1);
var ds = date2.difference(date1, 'day');

// Comparaisons polar
var polarvv='VV';
var polarvh='VH';


// Centering
var pos = Map.getCenter();
print('Coordinate of the Center of the Map',pos);

// Load the Sentinel-1 ImageCollection centered on the location "pos"
// Necessity to have the stack centered on this location in order to 
// find next the orbit numbers
//The values are in db
var sentinel1_liste = ee.ImageCollection('COPERNICUS/S1_GRD')
   .filterDate(date1, date2)
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
   .filter(ee.Filter.eq('instrumentMode', 'IW'))
   .filterBounds(pos)
   .filter(ee.Filter.eq('orbitProperties_pass', dir));

// sentinel collection of the world without the restriction of the position
var sentinel1_liste2 = ee.ImageCollection('COPERNICUS/S1_GRD')
   .filterDate(date1, date2)
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
   .filter(ee.Filter.eq('instrumentMode', 'IW'))
   .filter(ee.Filter.eq('orbitProperties_pass', dir));


// a solution to get metadata value of images of a collection
var NbOrbit = 
sentinel1_liste.aggregate_count_distinct('relativeOrbitNumber_start');
print('Number of Orbits',NbOrbit);
var ListOrbits = 
sentinel1_liste.aggregate_array('relativeOrbitNumber_start');
print(ListOrbits);


// find orbit numbers and their frequency
var freq = 
ee.Dictionary(ee.List(ListOrbits).reduce(ee.Reducer.frequencyHistogram()));
// print('freq',freq);
var array = ee.Array([freq.keys().map(ee.Number.parse), freq.values()]);
// print('array',array);

// orbit choice : first, the one with the max frequency
var frequences = array.slice(0,-1);
var arraysort = array.sort(frequences);
var index = ee.Number(NbOrbit).add(-1);
var orbite = arraysort.get([0,ee.Number(index)]);
  print('Selected orbit=',orbite);


// find images with the choice orbit
var sentinel1 = 
sentinel1_liste2.filterMetadata('relativeOrbitNumber_start', 'equals', 
orbite);

var polarization = 'VH'
var stack = sentinel1.select(polarization).mean();
Map.addLayer(stack,{min: -20, max:10},'VH mean'); // stack maximum images

var polarization = 'VV'
var stack = sentinel1.select(polarization).mean();
Map.addLayer(stack,{min: -20, max:10},'VV mean'); // stack maximum images

// Create a panel to hold the chart.
var panel = ui.Panel();
panel.style().set({
   width: '800px',
   position: 'bottom-right'
});
Map.add(panel);

// Register a function to draw a chart when a user clicks on the map.
Map.onClick(function(coords) {
   panel.clear();
   var point = ee.Geometry.Point(coords.lon, coords.lat);
   //panel.add(date);
   var chart2=ui.Chart.image.series(sentinel1.select('VV','VH'), point, 
null, 10)
   .setChartType('ScatterChart')
       .setOptions({
       title: 'temporal profile',
       hAxis: {title: 'Acquisition Date'},
       vAxis: {title: 'Back scatter coefficient (db)'},
       });
   panel.add(chart2);
});